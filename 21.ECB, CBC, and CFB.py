def initial_permutation(block):
    # Perform initial permutation on the block
    return [
        block[57-1], block[49-1], block[41-1], block[33-1], block[25-1], block[17-1], block[9-1], block[1-1],
        block[59-1], block[51-1], block[43-1], block[35-1], block[27-1], block[19-1], block[11-1], block[3-1],
        block[61-1], block[53-1], block[45-1], block[37-1], block[29-1], block[21-1], block[13-1], block[5-1],
        block[63-1], block[55-1], block[47-1], block[39-1], block[31-1], block[23-1], block[15-1], block[7-1],
        block[56-1], block[48-1], block[40-1], block[32-1], block[24-1], block[16-1], block[8-1], block[0],
        block[58-1], block[50-1], block[42-1], block[34-1], block[26-1], block[18-1], block[10-1], block[2-1],
        block[60-1], block[52-1], block[44-1], block[36-1], block[28-1], block[20-1], block[12-1], block[4-1]
    ]

def key_generation(key):
    # Perform key generation for DES
    # (For simplicity, this implementation uses a fixed key)
    return [0b1100101011111110111100001000011011000101000000101101011101101001,
            0b1111101001011001001111100110111011111011001000000101110100111100,
            0b1010110011000000110010101111111101001011101110011101101100110111,
            0b0111000010101100011110010000101111001110000110110011001101111000,
            0b1011101111010001011001010110101100001000011100010111110111101111,
            0b1100000000000110000010001100001000001001001101111011100000110000,
            0b1101110101110110101000100000011010001110010100100001111001100110,
            0b0011101010011111100100101110110111001110101100001101100001001011,
            0b0011101110111110111001110000101011110011010101010001110111111011,
            0b0101000110111110100101100011001110110110101110101000100100000001,
            0b0001001100101011000110000100100110110001001010111100110111010010,
            0b1010000110001000011101110000001000111111000011010111001011001111,
            0b0001011001110101110111100100101011000011010011001001110111100010,
            0b0011011001110001100101011101100101000100111100001001110100000100,
            0b1001011011111011100101101110101101101011111101100101011101110101,
            0b0011111100010101001010110011010000110101101111001110011100000100,
            0b1100001001101011010111110100111111110101110001000100011101000110,
            0b0110110111011010100010110001011101111110001100000000111101100011,
            0b1111110101010001011101010100001111100111010010010101010011011011,
            0b1111000100111111011101110100001001000011111000100001101110110110,
            0b0001100100010001111000101111110111010110001100100000111001110111,
            0b0000110100111110111100000010101011010010000010000011101000010110,
            0b0101110101011011110100111000100101111111001110111101001010001110,
            0b1101010110011101100000011110111001000000100110011100011011100010,
            0b1100111111101010001101011101110110100101010110001100110111100100,
            0b0011000100000101110110111000010010101110010001010000001100110110,
            0b1001101001101010111010110101101001010100001111010101011000111101,
            0b0011101111111000010100010001101110111110101101010001111111110111,
            0b1011110111010011111011110111111101110110111000010101010111111010,
            0b0011011101100101001110011111101101010000100010000001101001000011]

def des_decrypt(ciphertext, key):
    # Perform DES decryption
    block_size = 64
    ciphertext = int(ciphertext, 2)

    # Initial permutation
    ciphertext = initial_permutation(format(ciphertext, '064b'))

    # Key generation for decryption
    round_keys = key_generation(key)

    # Perform 16 rounds of Feistel network
    for i in range(15, -1, -1):
        # Expansion
        right_half_expanded = [ciphertext[i] for i in [31, 0, 1, 2, 3, 4]]

        # XOR with round key
        right_half_expanded_xor_key = [right_half_expanded[i] ^ round_keys[i] for i in range(6)]

        # Substitution
        right_half_substituted = [right_half_expanded_xor_key[i] for i in [2, 4, 1, 6, 3, 0, 5, 7]]

        # Permutation
        right_half_perm
